        -:    0:Source:a7.c
        -:    0:Graph:a7.gcno
        -:    0:Data:a7.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
function addTheNums called 1 returned 100% blocks executed 80%
        1:    2:int addTheNums(int x,int y)
        1:    2-block  0
        -:    3:{
        -:    4:    int sum;
        1:    5:    if(x>y)
        1:    5-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:    6:    sum=x+y;
    $$$$$:    6-block  0
        -:    7:    else
        1:    8:    sum = x-y;
        1:    8-block  0
        1:    9:    return sum;
        1:    9-block  0
        -:   10:}
        -:   11:
function averageOfNums called 1 returned 100% blocks executed 100%
        1:   12:float averageOfNums(int x,int y)
        1:   12-block  0
        -:   13:{
        -:   14:    float average;
        1:   15:    return ((float)(x)+(float)(y))/2;
        1:   15-block  0
        -:   16:}
        -:   17:
function fun1 called 0 returned 0% blocks executed 0%
    #####:   18:void fun1(int x){
    $$$$$:   18-block  0
    #####:   19:if(x>10)printf("fun1 prints %d  \n ",x);
    $$$$$:   19-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   19-block  1
call    2 never executed
    #####:   20:else{printf("fun1 prints %d  \n",10);}
    $$$$$:   20-block  0
call    0 never executed
    #####:   21:}
        -:   22:
function fun2 called 2 returned 100% blocks executed 71%
        2:   23:void fun2(int x){
        2:   23-block  0
        2:   24:if(x>100)printf("fun2 prints %d \n",x);
        2:   24-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    $$$$$:   24-block  1
call    2 never executed
        2:   25:else{printf("fun2 prints %d \n",100);}
        2:   25-block  0
call    0 returned 2
        2:   26:while(x>10)x--;
        2:   26-block  0
    $$$$$:   26-block  1
        2:   26-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2:   27:}
        -:   28:
function maxOfNums called 1 returned 100% blocks executed 88%
        1:   29:int maxOfNums(int x, int y){
        1:   29-block  0
        -:   30:    int max;
        1:   31:    if(x>y){max = x; 
        1:   31-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   32:    fun1(x);}
    $$$$$:   32-block  0
call    0 never executed
        1:   33:    else {max = y; fun2(y);}
        1:   33-block  0
call    0 returned 1
        6:   34:    while(x-y!=0)x++;
        1:   34-block  0
        5:   34-block  1
        6:   34-block  2
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        1:   35:    return max;
        1:   35-block  0
        -:   36:}
function minOfNums called 1 returned 100% blocks executed 80%
        1:   37:int minOfNums(int x, int y){
        1:   37-block  0
        -:   38:    int min;
        1:   39:    if(x>y){
        1:   39-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   40:        min = y; 
    #####:   41:        fun1(y);}
    $$$$$:   41-block  0
call    0 never executed
        -:   42:    else {
        1:   43:        min = x;
        1:   44:        fun2(x);}
        1:   44-block  0
call    0 returned 1
        1:   45:    return min;
        1:   45-block  0
        -:   46:}
        -:   47:
        -:   48:
function main called 1 returned 100% blocks executed 100%
        1:   49:int main()
        1:   49-block  0
        -:   50:{
        -:   51:    int number1,number2;
        -:   52:    int sum;
        -:   53:    float avg;
        -:   54:    int max;
        -:   55:    int min;
        -:   56:
        1:   57:    printf("Enter the first integer number: ");
        1:   57-block  0
call    0 returned 1
        1:   58:    scanf("%d",&number1);
call    0 returned 1
        -:   59: 
        1:   60:    printf("Enter the second integer number: ");
call    0 returned 1
        1:   61:    scanf("%d",&number2);   
call    0 returned 1
        -:   62:     
        1:   63:    sum=addTheNums(number1,number2);
call    0 returned 1
        1:   64:    avg=averageOfNums(number1,number2);
call    0 returned 1
        1:   65:    max=maxOfNums(number1,number2);
call    0 returned 1
        1:   66:    min=minOfNums(number1, number2);
call    0 returned 1
        1:   67:    printf("Number1: %d, Number2: %d\n",number1,number2);
call    0 returned 1
        1:   68:    printf("Sum: %d, Average: %f Max: %d Min %d\n",sum,avg,max,min);
call    0 returned 1
        -:   69:     
        1:   70:    return 0;
        -:   71:}
